# Notes app

## Intended for use with Dungeons and Dragons

This app is intended to assist TTRPG to take notes from their charachter's perspective. It allows users to create notes about people, places, things, events, and more. It is currently under development and has limited functionality but has the following functionality:

### Adding to the `notes` table

The `notes` table is the head of the database. It generates a unique UUID every time a new note is entered. When a user selects to 'add' a note an entry will be placed into this table with default vaules - an id and a time stamp. It will then wait for other updates to be submitted and the other columns, `title`, `tag`, and `note` will be filled in once data is put into any of the other tables.


## Order of Operations as a user is creating a new note.

First, user will click on 'Create Note', this will create an entry on the 'notes' table which fills out the id and timestamp.

```sql
INSERT INTO notes DEFAULT VALUES;
```

The user will then be directed to a page with a drop down menu to select which type of note they want to create - one option for each of the tables. For instance, an entry into the place table:

```SQL
INSERT INTO place (name, location, type, orgs, owned_by, note, note_id) VALUES (
	'The Salty Dog',
	'10 Emiser St, Demedan',
	'Tavern',
	'[hunter's lodge', 'thieves guild'],
	'Marlin MacDougal',
	'A note about the Salty Dog',
	< key captured when the DEFAULT VALUES were entered into notes in the previous step >
)
```

A user should see these notes in specific sections of the page, have the option to select, read, and edit notes that have previously been added. They should also be able to add notes about specific persons, places, things, etc.

## Database Triggers

These triggers are implemented into the [Schema](./backend/db/schema.sql).

### Sending Title, Tag, and Note to the notes table

Whenever a new note is entered on a table, its `name` is sent to the `notes` table as the value for the `title` column. The table's `id` is concated with the first two letters of the origin table's sequential id then sent to the `notes` table setting the `tag` column value (e.g. if the post id is 266 in the `events` table, the `tag` value in `notes` would be `ev266`.). The note entered is sent to the `notes` table setting the `note` column value. This id done where the `note_id` of the entry to the origin table matches the `id` from the `notes` table.

### Triggering entries on `people` table

When a note is entered into the `event` table, if the `persons_involved` column includes a name that is not included in the `people` table, a new entry is created in the `people` table for that person referencing the `note_id` being assigned to the new entry for the `event` table.

When a note is created in the `fam` table, if one of the people listed in `members` on that post is not anywhere in the `people` table, create a new note in the `people` table for that member of the family referencing the `note_id` being assigned to the new entry for the `fam` table.

When a note is created in the `org` table, if one of the people listed in `members` on that post is not anywhere in the `people` table, create a new note in the `people` table for that member of the family referencing the `notes_id` being assigned to the new entry for the `org` table.

### Triggering entries on `fam` table

When a note is created on the `person` table, if no values in `fam.name` match the `family` provided in the note entry, create a new entry in the `fam` table, referencing the `note_id` being assigned to the new entry for the `people` table. Also, this new entry being sent to the fam table should increment the fam_id up one to the next highest value.

### Triggering entries on `thing` table

When a note is created in the `event` table, if an item being placed in the `loot` column is not in the `thing` table, create a new note in the `thing` table for that item referencing the `note_id` being assigned to the new entry for the `event` table.


## Moving Forward from Here

Routes for other tables must be created and tested.

### People table reqs

The `name` column is required. `is_npc` should default to TRUE if no value is given. Family is not required and should not be entered until the `fam` table is created due to triggers. same goes for relations and orgs. 
